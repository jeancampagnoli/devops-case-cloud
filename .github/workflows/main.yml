name: CI/CD Pipeline para DigitalOcean

on:
  push:
    branches: [ "main" ] # Gatilho: rodar quando houver push na branch main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # A máquina virtual que o GitHub vai usar

    steps:
    - name: 1. Checkout do código
      uses: actions/checkout@v3

    - name: 2. Login no Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 3. Build e Push da Imagem Docker
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-case-app:latest

    - name: 4. Deploy no Droplet da DigitalOcean
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: root
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
        script: |
          # Puxa a imagem mais recente
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/devops-case-app:latest

          # Para e remove o container antigo, se existir (ignora o erro se não existir)
          docker stop flask-app || true
          docker rm flask-app || true

          # Roda o novo container
          docker run -d \
            --name flask-app \
            -p 80:5000 \
            -e APP_VERSION="1.1" \
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-case-app:latest